#!/usr/bin/env python3

import os
import sys
import argparse

import numpy as np
import nibabel as nib

def main(images_in, image_out, bvals_in, bval_out, bvecs_in, bvec_out):
    ## Images
    if images_in:
        # Load the first image.
        image_nifti_combined = nib.load(images_in[0])
        image_array_combined = image_nifti_combined.get_fdata()

        # Loop through the remaining images.
        for image_in in images_in[1:]:
            image_nifti = nib.load(image_in)
            image_array = image_nifti.get_fdata()

            # Ensure that the image is treated as 4D (could be 3D if it contains only one volume)
            if image_array.ndim == 3:
                image_array = np.expand_dims(image_array, 3)

            # Append the current image to the combined image.
            image_array_combined = np.append(image_array_combined, image_array, axis=3)

        # Save the combined image.
        image_nifti_combined = nib.Nifti1Image(image_array_combined, image_nifti_combined.affine, header=image_nifti_combined.header)
        nib.save(image_nifti_combined, image_out)
            
    ## Bval files
    if bvals_in:
        # Load the first bval file.
        bval_array_combined = np.loadtxt(bvals_in[0], ndmin=2)

        # Loop through the remaining bval files.
        for bval_in in bvals_in[1:]:
            bval_array = np.loadtxt(bval_in, ndmin=2)
            
            # Append the current bval file to the combined file.
            bval_array_combined = np.append(bval_array_combined, bval_array, axis=1)

        # Save the combined bval file.
        np.savetxt(bval_out, bval_array_combined, delimiter=' ', fmt='%.10g')
        
    ## Bvec files
    if bvecs_in:
        # Load the first bvec file.
        bvec_array_combined = np.loadtxt(bvecs_in[0], ndmin=2)

        # Loop through the remaining bvec files.
        for bvec_in in bvecs_in[1:]:
            bvec_array = np.loadtxt(bvec_in, ndmin=2)

            # Append the current bvec file to the combined file.
            bvec_array_combined = np.append(bvec_array_combined, bvec_array, axis=1)
            
        # Save the combined bvec file.
        np.savetxt(bvec_out, bvec_array_combined, delimiter='  ', fmt='%.10g')
    return

if (__name__ == '__main__'):
    # Create argument parser.
    description = '''Input a set of DTI series or associated data (bval or bvec files), and concatenate them in the time axis.'''
    parser = argparse.ArgumentParser(description=description, formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    
    # Define positional arguments.
#    parser.add_argument('', help='')
    
    # Define optional arguments.
    parser.add_argument('--images_in', nargs='*', type=str, help='paths to input DTI NIFTI files', metavar=('PATH1', 'PATH2'))
    parser.add_argument('--image_out', type=str, help='path to output DTI NIFTI file')
    parser.add_argument('--bvals_in', nargs='*', type=str, help='paths to input bval files, as generated by dcm2niix', metavar=('PATH1', 'PATH2'))
    parser.add_argument('--bval_out', type=str, help='path to output bval file, as generated by dcm2niix')
    parser.add_argument('--bvecs_in', nargs='*', type=str, help='paths to input bvec files, as generated by dcm2niix', metavar=('PATH1', 'PATH2'))
    parser.add_argument('--bvec_out', type=str, help='path to output bvec file, as generated by dcm2niix')

    # Print help if no arguments input.
    if (len(sys.argv) == 1):
        parser.print_help()
        sys.exit()

    # Parse arguments.
    args = parser.parse_args()

    # Run main function.
    main(**vars(args))
